Self introduction:


Hi, my name is Dhina, and I’m a Quality Assurance Engineer with over 
3 years of experience in both manual and automation testing,
currently working at Tata Consultancy Services in Bangalore.

Throughout my career, I’ve worked in Agile environments and have contributed to 2 projects,
   *including the Mainframe Modernization project for Experian ( transform legacy mainframe process into an cloud)
   *and the UPS logistics web application. (UPS project is a web-based application used for managing parcel deliveries and logistics services)
 In these roles, I’ve been responsible for creating and executing test cases, 
 Performing functional, regression, and smoke testing, validating data with AWS Athena, 
 and closely collaborating with development teams to ensure software quality.

****************************************************************************************************************************************************

Experian
********
My Role – QA Engineer (Manual + Automation)
I was part of the QA team, working in both manual testing and test automation, 
particularly focused on validating data through AWS Athena, writing test cases using Gherkin language,

I first ensure I fully understand the business requirement and acceptance criteria.
 I move the story to 'In Progress' in JIRA, write test cases or feature files,
 prepare data, and start testing. I log defects, keep my lead informed during daily stand-ups,
 and raise blockers if needed. After completing testing,
 I attach all evidence and move the story to 'Ready for Sign-Off'.
 
📅 Day-to-Day Activities in the Experian Project

🔹 Morning Routine
Daily Stand-Up Meeting:
Attended Agile daily stand-up with the Scrum team
Provided updates on test progress, defects, and blockers
Took feedback and clarifications from the manager or scrum master

🔹 During the Day
Requirement Review & Discussion:
Reviewed user stories and acceptance criteria from JIRA
Discussed unclear requirements with the manager or BA to avoid misinterpretations
Documented any changes in test scope

Test Design & Development:
Created test scenarios and test cases in Gherkin syntax for new stories
Updated step definitions to match updated test steps

Test Execution:
Retrieved input/output data from AWS Athena using SQL queries
Validated actual vs. expected data sets
Ran Cucumber automation scripts and analyzed reports
Logged defects in JIRA when mismatches or bugs were found

Collaboration & Support:

Worked closely with developers to reproduce and debug defects
Committed updated scripts and data files to Bitbucket

Communication with Manager:

Shared daily status updates with my manager (via email or tracker)
Discussed blockers or re-prioritization of tasks during informal catch-ups
Reviewed sprint progress and discussed retrospective feedback

🔹 End of the Day
Updated the Daily QA Tracker and Test Execution Reports
Ensured passed test cases and defect status were reflected in JIRA
Prepared for next day's user stories or regression testing

project-root/
│
├── pom.xml                             ← 🟢 Maven build and dependency config
│
├── src/
│   ├── main/
│   │   ├── resources/
│   │   │   ├── features/               ← All .feature files (Gherkin BDD)
│   │   │   │   ├── CAPS.feature
│   │   │   │   ├── VOTERS.feature
│   │   │   │   ├── PUBLIC_INFORMATION.feature
│   │   │   └── application.conf        ← Environment & file path configs
│   │   │
│   │   └── scala/
│   │       └── com/project/
│   │           ├── config/             ← Loads settings from config file
│   │           │   └── FrameworkConfig.scala
│   │           │
│   │           ├── utils/              ← Utility functions (DataFrame, files)
│   │           │   ├── DataFrameUtils.scala
│   │           │   └── FileUtils.scala
│   │           │
│   │           ├── context/            ← Stores shared state between steps
│   │           │   └── TestContext.scala
│   │           │
│   │           └── transformations/    ← Business logic & Glue job simulations
│   │               └── DataTransform.scala
│
│   └── test/
│       ├── scala/
│       │   └── com/project/
│       │       ├── stepDefinitions/    ← Gherkin step mappings (Scala)
│       │       │   ├── CAPS_Steps.scala
│       │       │   ├── VOTERS_Steps.scala
│       │       │   └── PUBLIC_INFO_Steps.scala
│       │       │
│       │       └── runner/             ← Runner that triggers all BDD tests
│       │           └── RunCucumberTest.scala
│
│       └── resources/
│           ├── input/                  ← Input test data files (CSV/JSON)
│           │   ├── caps_input.csv
│           │   └── voters_input.csv
│           │
│           └── expected/              ← Expected output for validation
│               ├── caps_expected.csv
│               └── voters_expected.csv


********************************************************************************************************************************


Day-to-Day Activities in the UPS Project:

"In the UPS project, I designed test cases by analyzing user stories and business requirements.
 I created functional, negative, and regression test cases (for modules like tracking, rate calculation, and shipment creation.)
 I documented them in Excel/TestRail and ensured coverage of both positive and edge-case scenarios.
 I also collaborated with the team to update test cases whenever there were changes in requirements."

On a daily basis, I:

Whenever I take a new story,
 I first ensure I fully understand the business requirement and acceptance criteria.
 I move the story to 'In Progress' in JIRA, write test cases or feature files,
 prepare data, and start testing. I log defects, keep my lead informed during daily stand-ups,
 and raise blockers if needed. After completing testing,
 I attach all evidence and move the story to 'Ready for Sign-Off'.

     Attended daily stand-up meetings to give updates and understand priorities
     Reviewed user stories and clarified doubts with business analysts or developers
     Created and updated test cases in Excel
     Executed test cases
     Logged defects in JIRA and followed up with developers to get them resolved
     Coordinated with the automation team to review and validate automation scripts
     Participated in sprint planning, retrospectives, and review meetings
     Prepared daily status reports to share progress with the QA lead or project manager

ups_project/
│
├── features/                         # Gherkin .feature files
│   ├── login.feature
│   ├── track_package.feature
│   ├── rate_calculation.feature
│   └── steps/
│       └── step_definitions.py      # Step definitions for features
│
├── pages/                           # Page Object Model (POM) classes
│   └── login_page.py
│   └── track_page.py
│   └── rate_page.py
│
├── utils/                           # Utility functions/config/browser setup
│   └── browser_setup.py
│   └── config.py
│
├── reports/                         # HTML or Allure reports
│
├── behave.ini                       # Behave configuration file
├── requirements.txt                 # List of Python dependencies
└── README.md

Sample test case 
| **Test Case ID**    | TC\_UPS\_001                                                                  |
| ------------------- | ----------------------------------------------------------------------------- |
| **Module**          | Package Tracking                                                              |
| **Test Scenario**   | Verify tracking status with a valid tracking number                           |
| **Pre-Condition**   | User is on UPS tracking page                                                  |
| **Test Steps**      | 1. Enter a valid tracking number<br>2. Click 'Track'<br>3. Observe the status |
| **Test Data**       | Tracking Number: 1Z12345E0205271688                                           |
| **Expected Result** | Package status like "In Transit" should be displayed                          |
| **Actual Result**   | As observed during testing                                                    |
| **Status**          | Pass/Fail                                                                     |
| **Remarks**         | -                                                                             |

Types of Test Cases Designed
Functional Test Cases

Track package
Login/Logout
Create shipment
Rate calculation

Negative Test Cases

Enter invalid tracking number
Try to track without entering a value
Enter unsupported characters in fields

Boundary/Edge Test Cases
Max-length tracking numbers
Empty input fields

*************************************************************************************************************************************

Gherkin Keywords:

Feature: Describes the feature.
Scenario: Describes a specific behavior.
Given: Initial context or state.
When: Action or event.
Then: Expected outcome.
And: Adds conditions.
But: Adds exceptions.
Background: Common steps for all scenarios.
Examples: Provides multiple data sets in Scenario Outline.

****************************************************************************************************************
Cucumber Options:

features: Path to feature files.
glue: Path to step definitions.
tags: Filters tests based on tags.
plugin: Specifies output formats (e.g., HTML reports).
strict: Ensures no undefined steps.
monochrome: Makes output readable in the console.
dryRun: Validates step definitions without running tests.

*******************************************************************************************************************
Hooks

in Cucumber, Hooks are methods that allow you to run certain pieces of code at specific points during the execution of your tests
Before Hook: Executes before each scenario, useful for setup.
After Hook: Executes after each scenario, useful for cleanup.
Tagged Hooks: You can define hooks that run before/after only certain scenarios, based on tags.
Global Hooks: Run setup and teardown methods before or after all scenarios (available in Cucumber 7+).
Hooks are a powerful feature in Cucumber for controlling the test environment and handling setup and cleanup tasks at different levels.

*****************************************************************************************************************
Agile cermoney:

Sprint Planning: Contributed to task breakdown and effort estimation.
Daily Standup: Shared progress, identified blockers, and offered help.
Sprint Review: Demonstrated completed work and gathered feedback.
Sprint Retrospective: Participated in continuous improvement discussions.
Backlog Refinement: Refined and prioritized backlog items, clarified requirements.

Poker Planning is an estimation technique used to gauge the effort or complexity of user stories.
It involves the team discussing the user story, selecting an estimate, and reaching a consensus through a series of discussions and re-estimations.
Typically performed during Sprint Planning or Backlog Refinement sessions to help the team understand how much work they can handle during a sprint.

**************************************************************************************************************
Git Commands

git init: Initializes a new repository.
git clone: Clones a remote repository to your local machine.
git status: Shows changes in the working directory.
git add: Stages changes for commit.
git commit: Commits changes to the local repository.
git push: Pushes local commits to the remote repository.
git pull: Fetches and merges changes from the remote repository.
git branch: Lists and manages branches.
git merge: Merges changes from one branch into another.
git log: Shows commit history.
git reset: Resets the state of files or commits.
git diff: Shows differences between files or commits.
git remote: Manages remote repositories.

***************************************************************************************************************
Bitbucket

Fork the repository (if working on a fork).
Clone the repository to your local machine.
Create a new branch for my changes.
Make my changes (code, files, etc.).
Stage and commit your changes:
git add .
git commit -m "Description of changes"
Push my changes remote branch:
git push origin my-branch-name
Create a Pull Request in the Bitbucket UI:
Go to the original repo and create a PR.
Provide a meaningful title and description for the PR.
Request Review from your senior or team lead.
Address Feedback if your senior leaves any comments or suggestions:
Make necessary changes and push updates.
PR Approval:
Once your senior reviews and approves, they will merge the PR or request further modifications.
Sync and Merge (if you have permissions) or your senior merges the PR.


*********************************************************************************************************
critical suitation in sprint:
********************************

How to Say It in an Interview:
“Once, just two days before sprint close,
 I was assigned a new story while already working on another.
 I immediately discussed with my QA lead to clarify priorities.
 Since the existing story was close to completion,
 we agreed I’d wrap it up first and then begin basic analysis on the new story.
 This helped manage workload while maintaining test quality and transparency within the team.”

1. Understanding Complex Business Logic
Challenge:

Some features like CAPS, VOTERS, and PUBLIC INFORMATION had complex transformation logic,
 especially in mainframe-to-AWS migrations.

How I handled it:

Closely collaborated with developers and BAs to understand the data flow
Created flowcharts and mapping documents to simplify the logic
Validated transformations step-by-step using intermediate outputs

🔹 2. Data Volume and Variability
Challenge:
Working with large datasets and inconsistent input data formats made test validation difficult.

How I handled it:

Used AWS Athena and Spark to efficiently process and validate data
Developed reusable scripts for comparing actual vs. expected output
Focused on sample-based and boundary value testing to cover edge cases

🔹 3. Test Data Preparation
Challenge:
Test data was not readily available or needed to be created
 manually in CSVs for DOM transformation and Glue job testing.

How I handled it:

Collaborated with devs to understand valid input formats
Created reusable input and expected data templates
Automated CSV creation for repetitive test cases

🔹 4. Maintaining Automation Framework
Challenge:
Frequent changes in the test logic and data structure
 required constant updates in the automation framework (Cucumber + Scala + Spark).

How I handled it:

Modularized the framework to separate transformation logic, assertions, and data loaders
Used config files to avoid hardcoding
Version-controlled updates using Git and followed proper review process

🔹 5. Synchronizing with Glue Job Execution
Challenge:
Sometimes, data was delayed or failed due to upstream issues in Glue jobs, 
making it hard to verify outputs on time.

How I handled it:

Added wait mechanisms or manual checks before validation
Logged job status and captured retry logic where applicable
Coordinated with the DevOps/AWS team to resolve job failures quickly

🔹 6. Mismatch in Expected vs Actual Data
Challenge:
Even small differences (extra spaces, format mismatch, case sensitivity) caused test failures.

How I handled it:
Implemented custom DataFrame comparators to ignore case/format issues
Used transformation functions to normalize both expected and actual output before comparison

🔹 7. Time Constraints & Sprint Pressure
Challenge:
Limited time during sprints to test complex scenarios end-to-end.

How I handled it:

Prioritized high-impact scenarios for early execution
Used automation to cover regression cases
Kept stakeholders informed about risks through daily syncs

✅ How to Say It in an Interview:

“One of the key challenges I faced was dealing with large datasets and complex transformation logic,
 especially when validating outputs from AWS Glue jobs.
 I tackled this by building reusable input/output templates,
 using Spark for efficient data handling, and writing custom comparison utilities to account for minor mismatches.
 Frequent framework updates were also challenging, so I modularized our Cucumber-Scala test suite to make it more maintainable.
 Collaborating closely with the dev and AWS teams helped us resolve job-level and data-level issues quickly.”
Interview question

Defect life cycle
@@@@@@@@@@@@@@@@@@2

When I find a defect, I first log it in JIRA with complete steps to reproduce,
 screenshots, and severity. Once it’s reviewed and assigned,
 the developer fixes it and changes the status to ‘Fixed’.
 I then retest it in the next build. If the issue is resolved,
 I mark it as ‘Verified’ and eventually ‘Closed’.
 If the issue persists, I reopen it.
 I always ensure traceability and communication with the team throughout the cycle.”

New – QA logs bug in JIRA after observing an issue.
Open – QA lead reviews and confirms it's valid.
Assigned – Bug assigned to developer for fixing.
In Progress – Dev starts working on it.
Fixed – Dev fixes and updates the status.
Retest – QA re-tests the issue in the build.
If it's still failing → status becomes Reopened
If it works → move to Verified

Closed – QA closes the bug after confirmation.
| Status          | Description                                                            | Who Handles It       |
| --------------- | ---------------------------------------------------------------------- | -------------------- |
| **New**         | Tester has identified and logged the defect.                           | QA                   |
| **Open**        | QA Lead/Manager has reviewed and accepted the defect for validation.   | QA / Test Lead       |
| **Assigned**    | Developer is assigned to fix the bug.                                  | Dev Lead / Manager   |
| **In Progress** | Developer is currently working on fixing the defect.                   | Developer            |
| **Fixed**       | Developer has fixed the bug and sent it back for re-testing.           | Developer            |
| **Retest**      | QA is re-testing the fix to verify if the issue is resolved.           | QA                   |
| **Reopened**    | QA finds the bug is still not fixed correctly. Sent back to dev again. | QA                   |
| **Verified**    | QA has confirmed that the defect is resolved and fix is working.       | QA                   |
| **Closed**      | QA/Manager closes the bug after final verification or after release.   | QA / Test Lead       |
| **Rejected**    | Developer disagrees with the defect (e.g., not a bug or out of scope). | Developer            |
| **Deferred**    | Bug is valid but fixing it is postponed to a future release.           | Product Owner / Lead |
| **Duplicate**   | The same defect was already reported earlier.                          | QA / Dev             |



!.
*******************************************************
| **Type of Testing**    | **Focus**                                                       | **When Performed**                                 | **Purpose**                                                       |
| ---------------------- | --------------------------------------------------------------- | -------------------------------------------------- | ----------------------------------------------------------------- |
| **Regression Testing** | Verifying that existing functionality still works after changes | After code changes, new features, or bug fixes     | Ensure no new defects have been introduced in existing features   |
| **Functional Testing** | Ensuring the software works as per the requirements             | During development or after feature implementation | Validate if the software behaves as expected                      |
| **Sanity Testing**     | Verifying if a specific functionality works correctly           | After receiving a new build or bug fix             | Quickly check if specific functionality works before deep testing |
| **Smoke Testing**      | Basic checks of the most critical features                      | After receiving a new build                        | Ensure the application doesn't immediately crash or fail          |

2.
*******************************************************
| **Term**          | **Definition**                                                                                                                                     | **When to Use**                                                               |
| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| **Test Case**     | A detailed document describing specific steps, input, and expected output for a feature.                                                           | When testing a specific functionality or feature.                             |
| **Test Scenario** | A high-level description of what to test (may include multiple test cases).                                                                        | When planning or outlining test cases for a functionality.                    |
| **Test Suite**    | A collection of related test cases, often grouped by feature/module.                                                                               | When organizing test cases into groups for specific areas of the application. |
| **Test Plan**     | A comprehensive document detailing the overall approach, objectives, schedule, and resources for testing.                                          | At the start of the testing process to define scope and strategy.             |
| **Test Strategy** | A high-level document outlining the approach, objectives, types of testing, and methods for the entire testing phase.                              | At the start of a project to define testing goals and approaches.             |
| **Defect vs Bug** | A defect is any deviation from expected behavior (could be due to design, requirement, or code), while a bug is a defect caused by a coding error. | Use "defect" for general issues and "bug" for code-related issues.            |
| **Test Data**     | Data used to validate whether the system behaves as expected under various conditions.                                                             | When setting up tests for functional, boundary, and performance testing.      |

3.
*******************************************************
Verification = "Are we building the product right?"
Validation = "Are we building the right product?"

Verification is about ensuring the product is being developed correctly, focusing on internal processes and adherence to specifications and requirements.
Validation is about ensuring the product is correct from the user’s perspective, ensuring that the product actually meets the business needs and user requirements.


2. What is the difference between list and tuple in Python?
*******************************************************
Explanation:

List: Mutable (can be changed after creation).
Tuple: Immutable (cannot be changed once created).

3. What is the use of self in Python classes?
*******************************************************
Explanation: self refers to the current instance of the class.
 It is used to access the attributes and methods of the class.

4. What is a Python decorator?
*******************************************************
Explanation: A decorator is a function that modifies the behavior of another function.
 It allows you to add functionality to an existing function without changing its code.

5. What are Python's built-in data types?
*******************************************************
Explanation: Python has several built-in data types:

Numeric types: int, float, complex.
Sequence types: list, tuple, range.
Mapping type: dict.
Set types: set, frozenset.
Text type: str.
Boolean type: bool.
Binary types: bytes, bytearray, memoryview.

6. What is a lambda function?
*******************************************************
Explanation: A lambda function is an anonymous,
 small function defined with the lambda keyword.
 It can have any number of arguments but only one expression.

Example: lambda x, y: x + y

7. What is the difference between == and is in Python?
*******************************************************
Explanation:

==: Checks if two values are equal.
is: Checks if two variables point to the same object in memory.

8. What are Python's data structures?
*******************************************************
Explanation: Python has several data structures:
List: Ordered, mutable collection.
Tuple: Ordered, immutable collection.
Set: Unordered collection of unique items.
Dictionary: Unordered collection of key-value pairs.

9. What is a generator in Python?
*******************************************************
Explanation: A generator is a function that returns an iterator that produces items lazily,
 one at a time, instead of all at once. It is defined using yield keyword.

10. What is the purpose of the __init__ method in Python classes?
*******************************************************
Explanation: The __init__ method is a constructor in Python.
 It is called when an object is instantiated, and it initializes the object's attributes.

11. How does Python handle memory management?
*******************************************************
Explanation: Python uses automatic memory management with the help of a garbage collector 
that handles memory allocation and deallocation.

12. What is slicing in Python?
*******************************************************
Explanation: Slicing is used to extract a part of a sequence 
(e.g., list, string). Syntax: sequence[start:stop:step]

13. What is the difference between range() and xrange() in Python 2.x?
*******************************************************
Explanation:

range() returns a list.
xrange() returns an iterator that generates numbers on demand (more memory efficient).
In Python 3.x, range() behaves like xrange().

14. What is the use of the global keyword in Python?
*******************************************************
Explanation: The global keyword is used to modify a global variable inside a function,
 allowing you to change its value.

15. What are modules and packages in Python?
*********************************************
Explanation:
Module: A single file containing Python code (functions, classes, etc.).
Package: A collection of modules grouped together in a directory, which may also contain subdirectories.


***********************************************************************************************************************************************************************************

Selenium
********
********

1. What is Selenium?
****************************
Answer: Selenium is an open-source tool used for automating web applications for testing purposes.
 It supports multiple browsers and programming languages.

🔹 2. What are the components of Selenium?
****************************
Answer:

Selenium IDE – Record & playback tool.
Selenium WebDriver – Automates browser actions.
Selenium Grid – Runs tests in parallel on multiple machines.
Selenium RC (Deprecated) – Older version replaced by WebDriver.

🔹 3. What is Selenium WebDriver?
****************************
Answer: A tool that allows you to automate browser actions by directly communicating with the browser.

🔹 4. How do you find elements in Selenium?
****************************
Answer:
By ID: driver.findElement(By.id("id"))
By Name: By.name("name")
By XPath: By.xpath("//tag[@attr='value']")
By CSS Selector: By.cssSelector("tag[attr='value']")
Others: ClassName, LinkText, PartialLinkText, TagName

🔹 5. What is the difference between findElement() and findElements()?
****************************
Answer:

findElement() – returns a single WebElement.
findElements() – returns a list of WebElements.

How to handle dropdowns in Python Selenium?
****************************

from selenium.webdriver.support.ui import Select
select = Select(driver.find_element(By.ID, "dropdown"))
select.select_by_visible_text("Option1")

✅ 7. How to handle alerts/pop-ups?
****************************

alert = driver.switch_to.alert
alert.accept()  # or alert.dismiss()

✅ 8. How to use waits (Implicit vs Explicit)?
****************************
Implicit Wait:

driver.implicitly_wait(10)
Explicit Wait:

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
wait = WebDriverWait(driver, 10)
element = wait.until(EC.presence_of_element_located((By.ID, "myId")))

✅ 9. How to perform mouse actions (hover, drag, etc)?
****************************
from selenium.webdriver import ActionChains
actions = ActionChains(driver)
actions.move_to_element(element).click().perform()

✅ 10. How to take screenshot in Python Selenium?
****************************
driver.save_screenshot("screenshot.png")

✅ 11. How to switch between frames?
****************************
driver.switch_to.frame("frameName")  # Or by index or element
driver.switch_to.default_content()

✅ 12. What is Page Object Model (POM)?
****************************
A design pattern where each web page is represented as a class.
Elements are defined as methods to improve reusability and maintainability.

✅ 13. How to upload a file?
****************************
driver.find_element(By.ID, "fileInput").send_keys("/path/to/file.txt")

✅ 14. Difference between close() and quit()?
****************************
driver.close() – Closes the current tab/window.
driver.quit() – Closes the entire browser and ends session.

✅ 15. How to handle multiple browser windows/tabs?
****************************
handles = driver.window_handles
driver.switch_to.window(handles[1])

✅ 16. How to work with dynamic elements?
****************************
Use dynamic XPath with contains(), starts-with(), etc.
driver.find_element(By.XPATH, "//button[contains(text(),'Submit')]")

✅ 17. How to run Selenium tests headless (no browser UI)?
****************************
from selenium.webdriver.chrome.options import Options
options = Options()
options.add_argument("--headless")
driver = webdriver.Chrome(options=options)

✅ 18. Can Selenium handle CAPTCHA?
****************************
File src = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
FileUtils.copyFile(src, new File("path.png"));

🔹 15. What are limitations of Selenium?
****************************
Answer:
Cannot test desktop/mobile apps.
Cannot handle CAPTCHA.
Needs programming knowledge.
No built-in reporting.

🔹 16. How do you handle dynamic web elements?
****************************

Answer: Use dynamic XPath or CSS Selectors using contains(), starts-with(), etc.
driver.findElement(By.xpath("//input[contains(@id,'email')]"));
****************************
🔹 17. What is the difference between close() and quit()?
****************************
Answer:

close() – Closes the current browser window.
quit() – Closes all browser windows and ends the session.

🔹 18. How to upload a file in Selenium?
****************************
Answer: Use sendKeys() on the file input element:
driver.findElement(By.id("upload")).sendKeys("path/to/file.txt");

Can Selenium handle CAPTCHA?
****************************
No. CAPTCHA is designed to block automation. Use 3rd party APIs (like OCR) if needed — but it's limited.


**********************************************************************************************************************************************************************************************

 AWS Athena – Interview Questions
**********************************

1. What is AWS Athena?
****************************
A serverless SQL query service used to analyze data directly in Amazon S3 using standard SQL.

2. How does Athena work?
****************************
You define a schema using Glue or manually.
Athena queries data stored in S3 using SQL.
You pay per query or data scanned.

3. What file formats does Athena support?
****************************
CSV, JSON, ORC, Parquet, Avro.

4. How to reduce cost in Athena?
****************************
Store data in columnar format (like Parquet) and compress it to scan less data.

5. Can Athena join multiple tables?
****************************
Yes, Athena supports joins across multiple datasets stored in S3.

6. Where does Athena store query results?
****************************
In a specified S3 bucket, which you can configure in the settings.

🟢 Amazon S3 – Interview Questions
****************************
1. What is Amazon S3?
****************************
Object storage service to store any amount of data with high availability.

2. What is an S3 bucket?
****************************
A container for storing objects (files) in S3.

3. What is the difference between S3 and EBS?
****************************
S3: Object storage (files); EBS: Block storage (used for EC2).

4. What are S3 storage classes?
****************************
Standard, Intelligent-Tiering, Glacier, Deep Archive (based on access frequency & cost).

5. What is versioning in S3?
****************************
Keeps multiple versions of an object to prevent accidental deletion/overwrite.

6. Can S3 trigger other services?
****************************
Yes, using S3 events to trigger Lambda, Glue jobs, etc.

🔵 AWS Glue Job – Interview Questions
****************************
1. What is AWS Glue?
****************************
A serverless data integration service that helps discover, prepare, and transform data for analytics.

2. What is a Glue Job?
****************************
A script (Python or Scala) that performs ETL (Extract, Transform, Load) tasks.

3. What is the Glue Data Catalog?
****************************
A central metadata repository used by Athena, Glue, Redshift to understand schema of S3 data.

4. What are triggers in Glue?
****************************
They automate job execution based on schedules or events (e.g., S3 upload).

5. How do Glue jobs work with Athena and S3?
****************************
Glue crawls S3 data → adds schema to Glue Catalog → Athena queries it → Glue job transforms data.

6. Can Glue jobs join multiple datasets?
****************************
Yes, you can perform joins, transformations, and load the result back to S3 or Redshift.

 How do they all work together?
****************************
Example flow:

Data lands in S3.
Glue Crawler scans and creates schema in Glue Catalog.
Use Athena to run SQL queries on S3 data using the catalog.
Glue Job performs ETL on the data and saves results to S3 or database.





